@tailwind base;
@tailwind components;
@tailwind utilities;

/* === Bird Animation Styles === */

/* This container holds the birds and is hidden in dark mode */
.bird-container {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100vh;
  overflow: hidden;
  pointer-events: none; /* Allows clicks to pass through to elements behind it */
  z-index: 1; /* Position it above the background image but below the main content */
}

/* This is the key rule: when the body has the 'dark' class, hide the birds. */
.dark .bird-container {
  display: none;
}

/* Styles for an individual bird */
.bird {
  position: absolute;
  /* Start off-screen to the left, using a fixed value */
  left: -20px;
  width: 20px;
  height: 20px;
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3E%3Cpath d='M0 2 L1 2 L1 3 L2 3 L2 4 L3 4 L3 3 L4 3 L4 2 L5 2 L5 3 L6 3 L6 4 L7 4 L7 3 L8 3 L8 2 L7 2 L7 1 L6 1 L6 0 L5 0 L5 1 L4 1 L4 0 L3 0 L3 1 L2 1 L2 0 L1 0 L1 1 L0 1 Z' fill='%234A5568'/%3E%3C/svg%3E");
  background-size: contain;
  background-repeat: no-repeat;
  
  /* Apply the two animations, using the CSS variables from the component */
  /* We are now using a different keyframe animation for movement */
  animation: fly-right-by-left var(--animation-duration) linear var(--animation-delay) infinite,
             flap 0.4s linear var(--animation-delay) infinite;
             
  will-change: left, transform; /* Performance optimization for animations */
  image-rendering: pixelated; /* Keeps the SVG sharp and pixelated */
}

/* NEW Keyframe animation for moving the bird across the screen by animating 'left' */
@keyframes fly-right-by-left {
  /* Flying Phase (0% to 50% of the animation duration) */
  0% {
    left: -20px;
    opacity: 1;
  }
  80% {
    left: 100%;
    opacity: 0.8;
  }
  /* Waiting Phase (50.1% to 100% of the duration) */
  80.1%, 100% {
    left: -20px; /* Reset position to the start */
    opacity: 0;   /* Stay invisible */
  }
}

/* Keyframe animation for the wing-flapping effect */
@keyframes flap {
  0%, 100% {
    transform: translateY(0px) rotate(-5deg);
  }
  50% {
    transform: translateY(-5px) rotate(5deg);
  }
}


/* === Starry Sky Animation Styles === */

/* The container is hidden by default and only appears in dark mode */
.starry-sky-container {
  display: none;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100vh;
  overflow: hidden;
  pointer-events: none;
  z-index: 0; /* Position it behind everything, including the forest background */
}

/* This is the key rule: when the body has the 'dark' class, show the stars. */
.dark .starry-sky-container {
  display: block;
}

/* Styles for an individual twinkling star */
.star {
  position: absolute;
  width: var(--star-size);
  height: var(--star-size);
  background-color: white;
  border-radius: 50%;
  animation: twinkle var(--animation-duration) ease-in-out var(--animation-delay) infinite;
}

/* Keyframe animation for the twinkling effect */
@keyframes twinkle {
  0%, 100% {
    opacity: 0.2;
    transform: scale(0.8);
  }
  50% {
    opacity: 1;
    transform: scale(1.2);
  }
}

/* === Shooting Star Styles === */

.shooting-star {
  position: absolute;
  top: 0;
  left: 0;
  width: 150px;
  height: 2px;
  background: linear-gradient(to left, white, rgba(255, 255, 255, 0));
  border-radius: 9999px;
  filter: drop-shadow(0 0 6px white);

  /* Start with an opacity of 0 so the stars are invisible by default */
  opacity: 0;
  
  /* The animation now controls the position and rotation completely */
  animation: shoot var(--animation-duration) ease-in-out var(--animation-delay) infinite;

  animation-fill-mode: both;

}

@keyframes shoot {
  0% {
    /* Start invisible and off-screen (top-right), with corrected rotation */
    transform: translateX(450vw) translateY(-200vh) rotate(145deg);
    opacity: 0;
  }
  /* Wait for a while before starting */
  50% {
    opacity: 0;
  }
  70% {
    /* Appear and begin the journey */
    opacity: 1;
  }
  100% {
    /* Travel down and left, ending around 40% viewport height, and fade out */
    transform: translateX(1vh) translateY(20vh) rotate(160deg);
    opacity: 0;
  }
}

/* === Sticky Note Flip Animation Styles (Diagonal Flip) === */

/* The scene container for the 3D effect */
.note-scene {
  perspective: 1000px;
}

/* The inner container that actually flips */
.note-card-inner {
  position: relative;
  width: 100%;
  height: 100%;
  transition: transform 0.8s; /* A slightly slower transition for a better feel */
  transform-style: preserve-3d;
}

/* Apply the diagonal flip transformation when this class is present */
.note-card-inner.is-flipped {
  transform: rotate3d(-1, 1, 0, 180deg);
}

/* Common styles for both front and back faces of the note */
.note-face {
  position: absolute;
  width: 100%;
  height: 100%;
  -webkit-backface-visibility: hidden; /* Safari */
  backface-visibility: hidden;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  padding: 2rem;
  border-radius: 0.5rem;
  box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
}

/* Front face styles */
.note-front {
  background-color: #fef08a; /* A nice sticky note yellow */
}
.dark .note-front {
  background-color: #facc15; /* A slightly darker yellow for dark mode */
}

/* Back face styles */
.note-back {
  background-color: #fef9c3; /* A lighter yellow for the back */
  /* Pre-rotate the back face along the same diagonal axis */
  transform: rotate3d(-1, 1, 0, 180deg);
}
.dark .note-back {
  background-color: #fde047;
}
